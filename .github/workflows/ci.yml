name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          # DB_HOST: "localhost"
          # DB_PORT: "5432"
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DB_HOST: "postgres"
      # ENV: "local"
      # DEBUG: "1"
      # SECRET_KEY: ${{ secrets.SECRET_KEY }}
      # RSA_PRIVATE_KEY_PATH: "/reats/dev/rsa/private/key"
      # RSA_PUBLIC_KEY_PATH: "/reats/dev/rsa/public/key"
      # DJANGO_ALLOWED_HOSTS: "*"
      # DJANGO_SIMPLE_JWT_ALGORITHM: "RS256"

      # DB_ENGINE: "django.db.backends.postgresql_psycopg2"
      # POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      # POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      # POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      # DB_HOST: "localhost"
      # DB_PORT: "5432"

      AWS_REGION: "eu-central-1"
      AWS_DEFAULT_REGION: "eu-central-1"
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r reats/requirements.txt
          pip install pre-commit pytest python-dotenv

      - name: Wait for PostgreSQL to be Ready
        run: |
          echo "Waiting for PostgreSQL..."
          for i in {1..30}; do
            nc -z localhost 5432 && echo "PostgreSQL is up" && exit 0
            sleep 1
          done
          echo "PostgreSQL failed to start" && exit 1

      - name: Run Migrations
        run: python reats/manage.py migrate

      - name: Run Pre-Commit Hooks
        run: pre-commit run --all-files

      - name: Run Tests
        run: pytest reats/tests --disable-warnings

  deploy:
    needs: build-and-test  # Deploy only if tests pass
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install AWS CLI & EB CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip install awsebcli --upgrade --user

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Check if Elastic Beanstalk Environment Exists
        id: check_env
        run: |
          if aws elasticbeanstalk describe-environments --environment-names "${{ secrets.EB_ENV_NAME }}" --query "Environments[*].Status" --output text | grep -q "Ready"; then
            echo "Environment exists and is ready."
            echo "exists=true" >> $GITHUB_ENV
          else
            echo "Elastic Beanstalk environment does not exist or is not ready."
            echo "exists=false" >> $GITHUB_ENV
          fi

      - name: Create Elastic Beanstalk Environment (If Missing)
        if: env.exists == 'false'
        run: |
          echo "Creating new Elastic Beanstalk environment..."
          eb init ${{ secrets.EB_APP_NAME }} --region ${{ secrets.AWS_REGION }} --platform "Docker"
          eb create ${{ secrets.EB_ENV_NAME }} --single

      - name: Deploy to Elastic Beanstalk
        run: |
          eb init ${{ secrets.EB_APP_NAME }} --region ${{ secrets.AWS_REGION }} --platform "Docker"
          eb deploy ${{ secrets.EB_ENV_NAME }}

